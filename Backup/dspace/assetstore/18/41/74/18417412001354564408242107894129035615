/* 
Ejemplo tomado del libro C: The Complete Reference. Herbert Schildt. McGrawHill(2000) 
Capitulo 7. Estructuras
*/

/* Un ejemplo sencillo de lista de direcciones de correo usando arreglo de estructuras. */
#include <stdio.h> 
#include <stdlib.h> 

#define MAX 100

struct dir {
  char nombre[30];
  char calle[40];
  char ciudad[20];
  char provincia[17];
  unsigned long int cp;
} dir_list[MAX];

void init_lista(void), intro(void);
void borrar(void), listar(void);
int menu_select(void), buscar_libre(void);
void guardar(void);
void cargar(void);

int main(void)
{
  char choice;

  init_lista(); /* inicializa la estructura del array */
  for(;;) {
    choice = menu_select();
    switch(choice) {
      case 1: intro();
        break;
      case 2: borrar();
        break;
      case 3: listar();
        break;
      case 4 : cargar();
	break;
      case 5: guardar();
	break;
     
      case 6: exit(0);
    }
  }
  return 0;
}

/* Initialize the list. */
void init_lista(void)
{
  register int t;

  for(t=0; t<MAX; ++t) dir_list[t].nombre[0] = '\0';
}

/* Get a menu selection. */
int menu_select(void)
{
  char s[80];
  int c;

  printf("1. Ingresar un nombre\n");
  printf("2. Borrar a nombre\n");
  printf("3. Lista el Directorio\n");
  printf("4. Cargar \n");
  printf("5. Guardar\n");
  printf("6. Salir\n");
  do {
    printf("\n Seleccione una opcion: ");
    gets(s);
    c = atoi(s);
  } while(c<0 || c>7);
  return c;
}

/* Input addresses into the list. */
void intro(void)
{
  int sitio;
  char s[80];

  sitio = buscar_libre();

  if(sitio==-1) {
    printf("\nLista Full");
    return;
  }

  printf("Ingrese nombre: ");
  gets(dir_list[sitio].nombre);

  printf("Ingrese calle: ");
  gets(dir_list[sitio].calle);

  printf("Ingrese ciudad: ");
  gets(dir_list[sitio].ciudad);

  printf("Ingrese provincia: ");
  gets(dir_list[sitio].provincia);

  printf("Ingrese cp: ");
  gets(s);
  dir_list[sitio].cp = strtoul(s, '\0', 10);
}

/* Buscar una estructura libre. */
int buscar_libre(void)
{
  register int t;

  for(t=0; dir_list[t].nombre[0] && t<MAX; ++t) ;

  if(t==MAX) return -1; /* no sitios free */
  return t;
}

/* borrar una dir. */
void borrar(void)
{
  register int sitio;
  char s[80];

  printf("Ingrese el nro de registro #: ");
  gets(s);
  sitio = atoi(s);

  if(sitio>=0 && sitio < MAX)
    dir_list[sitio].nombre[0] = '\0';
}

/* Mostrar en pantalla. */
void listar(void)
{
  register int t;

  for(t=0; t<MAX; ++t) {
    if(dir_list[t].nombre[0]) {
      printf("Nombre: %s\n", dir_list[t].nombre);
      printf("Calle: %s\n", dir_list[t].calle);
      printf("Ciudad: %s\n", dir_list[t].ciudad);
      printf("Porvinciaa: %s\n", dir_list[t].provincia);
      printf("zepe: %lu\n\n", dir_list[t].cp);
    }
  }
  printf("\n\n");
}
/*Guardar la lista*/
void guardar(void) {
	
	FILE *fp;
	register int i;
	printf("guardar\n");
	if((fp=fopen("correo", "wb"))==NULL) {
		printf("No se puede abrir el archivo \n");
		return;
	}
	for(i=0; i<MAX; i++)
		if(*dir_list[i].nombre)
			if(fwrite(&dir_list[i], sizeof(struct dir),1, fp)!=1)
				printf("Error al escribir el archivo. \n");
	fclose(fp);
}
/*Cargar la lista*/
void cargar(void) {
	FILE *fp;
	register int i;
	
	if((fp=fopen("correo", "rb"))==NULL) {
		printf("No se puede abrir el archivo \n");
		return;
	}
	init_lista();
	for(i=0; i<MAX; i++)
		if(fread(&dir_list[i], sizeof(struct dir), 1, fp)!=1)	{ 
				if (feof(fp)) break;
				printf("Error al escribir el archivo. \n");
		}
	fclose(fp);
}
